//[Some(ptr)] -> (A, Some(ptr)) -> (B, None)
//flipped push: [Some(ptr)] -> (A, Some(ptr)) -> (B, Some(ptr)) -> (X, None)
//flipped pop: [Some(ptr)] -> [A, (Some)] -> (B, None)
use std::mem;

pub struct List<T> {
    head: Link<T>,
    tail: Link<T>,
}

type Link<T> = Option<Box<Node<T>>>;

struct Node<T> {
    elem: T,
    next: Link<T>,
}

impl<T> List<T> {
    pub fn new() -> Self{
	List {head: None, tail: None}
    }
    pub fn push(&mut self, elem: T) {
	let new_tail = Box::new(Node {
	    elem: elem,
	    //when you push onto tail, your next is always None
	    next: None,
	});

	//swap the old tail to point to the new tail
	let old_tail = mem::replace(&mut self.tail, Some(new_tail));
	match old_tail {
	    Some(mut old_tail) => {
		old_tail.next = Some(new_tail);
	    }
	    None => {
		//Update the Head to point to it
		self.head = Some(new_tail);
	    }
	}
    }
}
